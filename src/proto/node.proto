syntax = "proto3";
package cex_broker; 

message ActionRequest {
  Action action = 1;                        // The CCXT method to call (e.g., "fetchBalance", "createOrder")
  map<string, string> payload = 2;          // Parameters to pass to the CCXT method
  string cex = 3;     // CEX identifier (e.g., "binance", "bybit")
  string symbol = 4;  // Optional: trading pair symbol if needed
}

message ActionResponse {
  string result = 1;       // JSON string of the result data
  string proof = 2; 
}

message SubscribeRequest {
  string cex = 1;                          // CEX identifier (e.g., "binance", "bybit")
  string symbol = 2;                        // Trading pair symbol (e.g., "BTC/USDT")
  SubscriptionType type = 3;                // Type of subscription (orderbook, trades, etc.)
  map<string, string> options = 4;          // Additional subscription options
}

message SubscribeResponse {
  string data = 1;                         // JSON string of the streaming data
  int64 timestamp = 2;                     // Unix timestamp of the data
  string symbol = 3;                       // Trading pair symbol
  SubscriptionType type = 4;               // Type of subscription
}

enum SubscriptionType {
  NO_ACTION=0;
  ORDERBOOK = 1;                           // Order book updates
  TRADES = 2;                              // Recent trades
  TICKER = 3;                              // Ticker information
  OHLCV = 4;                               // OHLCV candlestick data
  BALANCE = 5;                             // Balance updates
  ORDERS = 6;                              // Order updates
}

service cex_service {
  rpc ExecuteAction(ActionRequest) returns (ActionResponse);
  rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse);
}

// Mode enum for price direction
enum Action {
  NoAction=0;
  Deposit = 1;
  Transfer = 2;
  CreateOrder= 3;
  GetOrderDetails=4;
  CancelOrder=5;
  FetchBalance=6;
  FetchBalances=7;
  FetchDepositAddresses=8;
  FetchTicker=9;
}